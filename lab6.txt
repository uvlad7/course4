--Лабораторная выполняется в СУБД  Oracle. 
--Cкопируйте файл  EDU6.txt  в каталог C:\TEMP .
--Раскройте файл и ознакомтесь со скриптом создания и заполнения таблиц для выполнения лабораторной. 
--База данных имеет дополнительную таблицу t_error.  
--Произведите запуск Oracle.  Запустите скрипты EDU6.txt на выполнение.
--Вставте в эту строку Ваши ФИО, номер группы, курса. ФИО                       , группа            , курс 4.      
--Файл с отчётом о выполнении лабораторной создаётся путём вставки скриптов, созданных Вами программ после пунктов 1a, 1b.
--Файл отчёта именуется фамилией студента  в английской транскрипции, с расширением .txt и сохраняется в каталоu.

--1a. Имеются PL_SQL-блоки, содержащий следующие операторы:
/*declare
     empnum integer; 
     begin
      insert into bonus values (505,15, 2018, 500, null);
end;*/

/*declare
     empnum integer; 
     begin
      insert into job values (1010, 'Accountant xxxxxxxxxx',5500);
end;*/

/*declare
     empnum integer; 
     begin
      select empno into empnum from emp where empno=505 or empno=403;
end;*/
--Оператор исполняемого раздела в каждом из блоков вызывает предопределённое исключение со своими предопределёнными
--кодом и сообщением. 
--Дополните блоки разделами обработки исключительных ситуаций. 
--Обработка каждой ситуации состоит в занесении в таблицу t_error предопределённых кода ошибки, 
--сообщения об ошибке и текущих даты и времени, когда ошибка произошла.
declare empnum integer;
ecode integer;
emsg varchar(100);
begin
insert into
  bonus
values
  (505, 15, 2018, 500, null);
EXCEPTION
  WHEN OTHERS THEN ecode: = SQLCODE;
emsg: = SUBSTR(SQLERRM, 1, 100);
INSERT INTO
  T_ERROR
VALUES
  (ecode, emsg, CURRENT_DATE);
end;

declare empnum integer;
ecode integer;
emsg varchar2(500);
begin
insert into
  job
values
  (1010, 'Accountant xxxxxxxxxx', 5500);
EXCEPTION
  WHEN OTHERS THEN ecode: = SQLCODE;
emsg: = SUBSTR(SQLERRM, 1, 100);
INSERT INTO
  T_ERROR
VALUES
  (ecode, emsg, CURRENT_DATE);
end;

declare empnum integer;
ecode integer;
emsg varchar2(500);
begin
select
  empno into empnum
from
  emp
where
  empno = 505
  or empno = 403;
EXCEPTION
  WHEN OTHERS THEN ecode: = SQLCODE;
emsg: = SUBSTR(SQLERRM, 1, 500);
INSERT INTO
  T_ERROR
VALUES
  (ecode, emsg, CURRENT_DATE);
end;

--1b. Создайте собственную исключительную ситуацию ex_one с кодом -16000 и сообщением 
--'premium more than possible by m for n months', где m - превышение премиального фонда при введении очередной записи
--в таблицу bonus для месяца n.
--Исключительная ситуация ex_one наступает при нарушении бизнес-правила: "Сумма всех премий (премии в столбце bonvalue), начисленных с начала 2020 года
--за n месяцев, не может быть больше 1000*n" 1<= n<=12. То есть, если премиальный фонд в 1000 денежных единиц полностью не
--израсходован в текущем месяце, то его остаток может быть израсходован в последующие месяцы, но без нарушения суммарного
--премиального фонда за каждые n месяцев. 
--Создайте собственную исключительную ситуацию ex_two с кодом -16001 и сообщением "the amount of bonuses in the n-th month is less than in the previous month",
--где n+1 номер месяца в первой записи вводимой в таблицу bonus для (n+1)-го месяца(как признак завершения записей для n-го месяца).
--Исключительная ситуация ex_two наступает, при нарушении бизнес-правила: "Сумма всех премий за n-ый месяц не может быть меньше, чем
--сумма всех премий за предыдущий месяц. Как уже указано выше, признак окончания начислений за n-ый месяц - появление первой записи с новым значением 
--номера месяца n+1 (доначисление премий за предыдущие месяцы не допускается). Для января исключительная ситуация не рассматривается.
--Рассматривается только 2020 года.
--Создайте блок с операторами, вызывающими нарушение бизнес-правил и обработку соответсвующих ситуаций.
--При наступлении пользовательской исключительной ситуации ex_two обработка состоит в занесении данных о ней 
--(аналогично разделу 1a) в таблицу t_error и отмене фиксации записи в таблице bonus (оператор rollback).    
 
CREATE
OR REPLACE TRIGGER bonus_trigger BEFORE
INSERT
  ON bonus FOR EACH ROW DECLARE PRAGMA AUTONOMOUS_TRANSACTION;
CURSOR bonus_cursor_2020 IS
SELECT
  month,
  SUM(bonvalue) AS bonvalue
FROM
  bonus
WHERE
  YEAR = 2020
GROUP BY
  MONTH
ORDER BY
  MONTH;
ex_one EXCEPTION;
PRAGMA exception_init(ex_one, -16000);
ex_two EXCEPTION;
PRAGMA exception_init(ex_two, -16001);
acum_bonus REAL: = 0;
prev_bonus REAL: = 0;
prev_month INTEGER: = 0;
ecode INTEGER;
emsg VARCHAR(100);
BEGIN FOR row IN bonus_cursor_2020 LOOP prev_month: = row.month;
IF (prev_bonus > row.bonvalue) THEN raise ex_two;
END IF;
acum_bonus: = acum_bonus + row.bonvalue;
prev_bonus: = row.bonvalue;
IF (acum_bonus > row.month * 1000) THEN raise ex_one;
END IF;
END LOOP;
COMMIT;
EXCEPTION
WHEN ex_one THEN ROLLBACK;
ecode: = SQLCODE;
INSERT INTO
  T_ERROR
VALUES
  (
    ecode,
    'premium more than possible by ' || acum_bonus - prev_month * 1000 || ' for ' || prev_month || ' months',
    SYSDATE
  );
COMMIT;
  WHEN ex_two THEN ROLLBACK;
ecode: = SQLCODE;
INSERT INTO
  T_ERROR
VALUES
  (
    ecode,
    'the amount of bonuses in the ' || prev_month || ' is less than in the previous month',
    SYSDATE
  );
COMMIT;
END;
/
insert into bonus values (401, 1, 2020, 10000, NULL);
